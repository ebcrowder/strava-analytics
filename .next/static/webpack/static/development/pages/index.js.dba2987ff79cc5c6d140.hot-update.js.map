{"version":3,"file":"static/webpack/static/development/pages/index.js.dba2987ff79cc5c6d140.hot-update.js","sources":["webpack:///./components/Graph.js","webpack:///./components/graphs/ElevationGain.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport getConfig from 'next/config';\n\nimport Distance from './graphs/Distance';\nimport ElevationGain from './graphs/ElevationGain';\n\nconst { publicRuntimeConfig } = getConfig();\nconst { STRAVA_TOKEN } = publicRuntimeConfig;\n\nconst Graph = () => {\n  const [distanceData, setDistanceData] = useState([]);\n  const [elevationGainData, setElevationGainData] = useState([]);\n\n  const fetchStravaData = async () => {\n    const res = await fetch(\n      'https://www.strava.com/api/v3/athlete/activities',\n      {\n        method: 'GET',\n        headers: {\n          Authorization: `Bearer ${STRAVA_TOKEN}`\n        }\n      }\n    );\n    const json = await res.json();\n\n    const distanceData = json.map(activity => {\n      if (activity.type === 'Run') {\n        return {\n          type: 'Run',\n          distance: Math.round(activity.distance * 0.000621371)\n        };\n      } else {\n        return {\n          type: 'Ride',\n          distance: Math.round(activity.distance * 0.000621371)\n        };\n      }\n    });\n\n    setDistanceData(distanceData);\n\n    const elevationGainData = json.map(activity => {\n      if (activity.type === 'Run') {\n        return {\n          type: 'Run',\n          elevationGain: activity.total_elevation_gain\n        };\n      } else {\n        return {\n          type: 'Ride',\n          elevationGain: activity.total_elevation_gain\n        };\n      }\n    });\n\n    setElevationGainData(elevationGainData);\n  };\n\n  useEffect(() => {\n    fetchStravaData();\n  }, []);\n\n  return (\n    <div\n      style={{\n        height: 500,\n        width: 1000,\n        boxShadow: '10px 10px 8px 10px #BDBDBD'\n      }}\n    >\n      <Distance data={distanceData} />\n      <ElevationGain data={elevationGainData} />\n    </div>\n  );\n};\n\nexport default Graph;\n","import { ResponsiveStream } from '@nivo/stream';\n\nconst ElevationGain = props => {\n  return (\n    <ResponsiveStream\n      data={props.data}\n      keys={['distance']}\n      colors=\"category10\"\n      curve=\"linear\"\n      margin={{\n        top: 50,\n        right: 110,\n        bottom: 50,\n        left: 60\n      }}\n      axisBottom={{\n        orient: 'bottom',\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: 'Days',\n        legendOffset: 36\n      }}\n      axisLeft={{\n        orient: 'left',\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: 'Distance',\n        legendOffset: -40\n      }}\n      offsetType=\"none\"\n      fillOpacity={0.85}\n      borderColor=\"#000\"\n      animate={true}\n      motionStiffness={90}\n      motionDamping={15}\n    />\n  );\n};\n\nexport default ElevationGain;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AADA;AAFA;AACA;AAJA;AACA;AADA;AAAA;AACA;AADA;AAUA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AACA;AA3CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AA4CA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAHA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;;;;;;;;;;;;;;;;;AC5EA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AAhCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmCA;AACA;AACA;;;;A","sourceRoot":""}